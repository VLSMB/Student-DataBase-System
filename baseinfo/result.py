# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'result.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sql

class Ui_resultWindow(QtWidgets.QMainWindow):
    def EDIT(self):
        column = self.tbResult.currentColumn()
        if column == -1:
            QtWidgets.QMessageBox.warning(self, "提示", "请选择一个项目！")
        elif column == 0:
            QtWidgets.QMessageBox.critical(self, "提示", "编号为固定序列，不能修改！")
        elif column == 1 or column == 2 or column == 3:
            QtWidgets.QMessageBox.warning(self, "提示", "有关学生信息的修改，请移步到“学生信息管理”！")
        elif column == 4:
            text, flag = QtWidgets.QInputDialog.getItem(self, "修改考试种类", "请选择修改之后的考试种类：", self.result.examkindsdict.values(),
                                                        list(self.result.examkindsdict.values()).index(self.tbResult.currentItem().text()), False)
            if flag:
                ID = self.tbResult.item(self.tbResult.currentRow(), 0).text()
                kindID = self.result.examkindsdict_copy[text]
                result = self.result.editkindID(kindID, ID)
                if result:
                    QtWidgets.QMessageBox.information(self, "提示", "修改成功！")
                    self.tbResult.currentItem().setText(text)
                else:
                    QtWidgets.QMessageBox.critical(self, "提示", "修改失败！")
        elif column == 5:
            text, flag = QtWidgets.QInputDialog.getItem(self, "修改考试科目", "请选择修改之后的考试科目：", self.result.subjectdict.values(),
                                                        list(self.result.subjectdict.values()).index(self.tbResult.currentItem().text()), False)
            if flag:
                ID = self.tbResult.item(self.tbResult.currentRow(), 0).text()
                subID = self.result.subjectdict_copy[text]
                result = self.result.editsubID(subID, ID)
                if result:
                    QtWidgets.QMessageBox.information(self, "提示", "修改成功！")
                    self.tbResult.currentItem().setText(text)
                else:
                    QtWidgets.QMessageBox.critical(self, "提示", "修改失败！")
        elif column == 6:
            text, flag = QtWidgets.QInputDialog.getDouble(self, "修改成绩", "请输入修改之后的成绩：", float(self.tbResult.currentItem().text()), 0.00, 200.00, 2)
            if flag:
                ID = self.tbResult.item(self.tbResult.currentRow(), 0).text()
                result = self.result.editgrade(text, ID)
                if result:
                    QtWidgets.QMessageBox.information(self, "提示", "修改成功！")
                    self.tbResult.currentItem().setText(str(text))
                else:
                    QtWidgets.QMessageBox.critical(self, "提示", "修改失败！")
    def ADD(self):
        if self.cboxGrade.currentText() == "所有" or self.cboxClass.currentText() == "所有" or self.cboxKinds.currentText() == "所有" or self.cboxSubject.currentText() == "所有" or self.cboxStuName.currentText() == "所有" or self.editResult.text() == "":
            QtWidgets.QMessageBox.warning(self, "提示", "请选择具体的选项！")
            return None
        ID = self.tbResult.item(self.tbResult.rowCount()-1, 0).text()
        addtup = (int(ID)+1, self.result.studentdict_copy[self.cboxStuName.currentText()],
                  self.result.examkindsdict_copy[self.cboxKinds.currentText()], self.result.subjectdict_copy[self.cboxSubject.currentText()],
                  self.editResult.value())
        flag = self.result.addresult(addtup)
        if flag:
            QtWidgets.QMessageBox.information(self, "提示", "增加成功！")
            self.tbResult.setRowCount(self.tbResult.rowCount()+1)
            # result的写法和student写法完全不同，所以这里出问题了
            # 这里我把表单创建写死了，不能增加新内容了
            # 所以…没办法刷新了
            self.close()
            '''self.tbResult.setItem(self.tbResult.rowCount(), 0, QtWidgets.QTableWidgetItem(str(int(ID)+1)))
            self.tbResult.setItem(self.tbResult.rowCount(), 1, QtWidgets.QTableWidgetItem(self.result.studentdict_copy[self.cboxStuName.currentText()]))
            self.tbResult.setItem(self.tbResult.rowCount(), 2, QtWidgets.QTableWidgetItem(self.cboxStuName.currentText()))
            self.tbResult.setItem(self.tbResult.rowCount(), 3, QtWidgets.QTableWidgetItem(self.cboxClass.currentText()))
            self.tbResult.setItem(self.tbResult.rowCount(), 4, QtWidgets.QTableWidgetItem(self.cboxKinds.currentText()))
            self.tbResult.setItem(self.tbResult.rowCount(), 5, QtWidgets.QTableWidgetItem(self.cboxSubject.currentText()))
            self.tbResult.setItem(self.tbResult.rowCount(), 6, QtWidgets.QTableWidgetItem(str(self.editResult.value())))'''
        else:
            QtWidgets.QMessageBox.critical(self, "提示", "增加失败！")
    def DELETE(self):
        if self.tbResult.currentRow() == -1:
            QtWidgets.QMessageBox.warning(self, "提示", "请选择一个项目！")
            return None
        ID = self.tbResult.item(self.tbResult.currentRow(), 0).text()
        choice = QtWidgets.QMessageBox.question(self, "提示", f"是否要删除成绩ID {ID} ？")
        if choice == QtWidgets.QMessageBox.Yes:
            flag = self.result.deltestudent(ID)
            if flag:
                QtWidgets.QMessageBox.information(self, "提示", "删除成功！")
                self.tbResult.removeRow(self.tbResult.currentRow())
                self.reload()
            else:
                QtWidgets.QMessageBox.critical(self, "提示", "删除失败！")
    def setclassbox(self):

        print(self.cboxGrade.currentText())
        gradedict_copy = dict(zip(self.result.gradedict.values(), self.result.gradedict.keys()))
        if self.cboxGrade.currentText() != "所有":
            self.cboxClass.clear()
            self.className = []
            for x, y in self.result.classdict.items():
                if gradedict_copy[self.cboxGrade.currentText()] == x[1]:
                    self.cboxClass.addItem(y)
                    self.className.append(y)
            self.cboxClass.addItem("所有")
            self.btnQuery.click()
        else:
            self.cboxClass.clear()
            self.className = []
            for x, y in self.result.classdict.items():
                self.cboxClass.addItem(y)
                self.className.append(y)
            self.cboxClass.addItem("所有")
            self.btnQuery.click()
    def reload(self):
        for i in range(self.tbResult.rowCount()):
            # 先全部显示
            self.tbResult.showRow(i)
        for i in range(self.tbResult.rowCount()):
            if self.cboxClass.currentText() != "所有":
                if self.tbResult.item(i, 3).text() != self.cboxClass.currentText():
                    self.tbResult.hideRow(i)
            else:
                if self.cboxGrade.currentText() != "所有":
                    if self.tbResult.item(i, 3).text() not in self.className:
                        self.tbResult.hideRow(i)
            if self.cboxSubject.currentText() != "所有":
                if self.tbResult.item(i, 5).text() != self.cboxSubject.currentText():
                    self.tbResult.hideRow(i)
            if self.cboxKinds.currentText() != "所有":
                if self.tbResult.item(i, 4).text() != self.cboxKinds.currentText():
                    self.tbResult.hideRow(i)
            if self.cboxStuName.currentText() != "所有":
                if self.tbResult.item(i, 2).text() != self.cboxStuName.currentText():
                    self.tbResult.hideRow(i)
    def initialization(self):
        print("INITIALIZING")
        self.result = sql.result()
        self.cboxGrade.addItems(self.result.gradedict.values())
        self.cboxClass.addItems(self.result.classdict.values())
        self.cboxKinds.addItems(self.result.examkindsdict.values())
        self.cboxSubject.addItems(self.result.subjectdict.values())
        self.cboxStuName.addItems(self.result.studentdict.values())
        self.cboxGrade.addItem("所有")
        self.cboxClass.addItem("所有")
        self.cboxKinds.addItem("所有")
        self.cboxSubject.addItem("所有")
        self.cboxStuName.addItem("所有")
        self.cboxClass.setCurrentIndex(len(self.result.classdict))
        self.cboxKinds.setCurrentIndex(len(self.result.examkindsdict))
        self.cboxSubject.setCurrentIndex(len(self.result.subjectdict))
        self.cboxGrade.setCurrentIndex(len(self.result.gradedict))
        self.cboxStuName.setCurrentIndex(len(self.result.studentdict))
        self.resultdb = self.result.getresult()
        self.tbResult.setRowCount(len(self.resultdb))
        for i in range(self.tbResult.rowCount()):
            self.tbResult.setItem(i, 0, QtWidgets.QTableWidgetItem(str(self.resultdb[i][0])))
            self.tbResult.setItem(i, 1, QtWidgets.QTableWidgetItem(str(self.resultdb[i][1])))
            self.tbResult.setItem(i, 2, QtWidgets.QTableWidgetItem(self.result.studentdict[self.resultdb[i][1]]))
            self.tbResult.setItem(i, 3, QtWidgets.QTableWidgetItem(self.result.classdict[self.result.stuclassdict[self.resultdb[i][1]]]))
            self.tbResult.setItem(i, 4, QtWidgets.QTableWidgetItem(self.result.examkindsdict[self.resultdb[i][2]]))
            self.tbResult.setItem(i, 5, QtWidgets.QTableWidgetItem(self.result.subjectdict[self.resultdb[i][3]]))
            self.tbResult.setItem(i, 6, QtWidgets.QTableWidgetItem(str(self.resultdb[i][4])))
        self.tbResult.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
    def setupUi(self, resultWindow):
        resultWindow.setObjectName("resultWindow")
        resultWindow.resize(766, 383)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/ico/images/appstu.ICO"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        resultWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(resultWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(7, 10, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.cboxKinds = QtWidgets.QComboBox(self.centralwidget)
        self.cboxKinds.setGeometry(QtCore.QRect(80, 10, 69, 22))
        self.cboxKinds.setObjectName("cboxKinds")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(317, 9, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.cboxClass = QtWidgets.QComboBox(self.centralwidget)
        self.cboxClass.setGeometry(QtCore.QRect(390, 9, 69, 22))
        self.cboxClass.setObjectName("cboxClass")
        self.btnExit = QtWidgets.QPushButton(self.centralwidget)
        self.btnExit.setGeometry(QtCore.QRect(710, 3, 51, 31))
        self.btnExit.setObjectName("btnExit")
        self.btnDel = QtWidgets.QPushButton(self.centralwidget)
        self.btnDel.setGeometry(QtCore.QRect(650, 3, 51, 31))
        self.btnDel.setObjectName("btnDel")
        self.btnAdd = QtWidgets.QPushButton(self.centralwidget)
        self.btnAdd.setGeometry(QtCore.QRect(530, 3, 51, 31))
        self.btnAdd.setObjectName("btnAdd")
        self.btnEdit = QtWidgets.QPushButton(self.centralwidget)
        self.btnEdit.setGeometry(QtCore.QRect(590, 3, 51, 31))
        self.btnEdit.setObjectName("btnEdit")
        self.btnQuery = QtWidgets.QPushButton(self.centralwidget)
        self.btnQuery.setGeometry(QtCore.QRect(470, 3, 51, 31))
        self.btnQuery.setObjectName("btnQuery")
        self.tbResult = QtWidgets.QTableWidget(self.centralwidget)
        self.tbResult.setGeometry(QtCore.QRect(0, 40, 761, 301))
        self.tbResult.setObjectName("tbResult")
        self.tbResult.setColumnCount(7)
        self.tbResult.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbResult.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbResult.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbResult.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbResult.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbResult.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbResult.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbResult.setHorizontalHeaderItem(6, item)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(303, 353, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(473, 355, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(643, 356, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.editResult = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.editResult.setGeometry(QtCore.QRect(687, 356, 71, 20))
        self.editResult.setObjectName("editResult")
        self.editResult.setDecimals(2)
        self.editResult.setRange(0.00, 200.00)
        self.editResult.setValue(150.00)
        self.cboxGrade = QtWidgets.QComboBox(self.centralwidget)
        self.cboxGrade.setGeometry(QtCore.QRect(233, 10, 69, 22))
        self.cboxGrade.setObjectName("cboxGrade")
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(160, 10, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_10.setFont(font)
        self.label_10.setObjectName("label_10")
        self.cboxStuName = QtWidgets.QComboBox(self.centralwidget)
        self.cboxStuName.setGeometry(QtCore.QRect(380, 353, 69, 22))
        self.cboxStuName.setObjectName("cboxStuName")
        self.cboxSubject = QtWidgets.QComboBox(self.centralwidget)
        self.cboxSubject.setGeometry(QtCore.QRect(550, 354, 69, 22))
        self.cboxSubject.setObjectName("cboxSubject")
        resultWindow.setCentralWidget(self.centralwidget)
        self.initialization()

        self.retranslateUi(resultWindow)
        self.btnExit.clicked.connect(resultWindow.close)
        self.btnQuery.clicked.connect(self.reload)
        self.cboxSubject.currentIndexChanged.connect(self.btnQuery.click)
        self.cboxClass.currentIndexChanged.connect(self.btnQuery.click)
        self.cboxStuName.currentIndexChanged.connect(self.btnQuery.click)
        self.cboxKinds.currentIndexChanged.connect(self.btnQuery.click)
        self.cboxGrade.currentIndexChanged.connect(self.setclassbox)
        self.btnDel.clicked.connect(self.DELETE)
        self.btnAdd.clicked.connect(self.ADD)
        self.btnEdit.clicked.connect(self.EDIT)
        QtCore.QMetaObject.connectSlotsByName(resultWindow)

    def retranslateUi(self, resultWindow):
        _translate = QtCore.QCoreApplication.translate
        resultWindow.setWindowTitle(_translate("resultWindow", "成绩管理"))
        self.label_2.setText(_translate("resultWindow", "考试种类："))
        self.label_3.setText(_translate("resultWindow", "选择班级："))
        self.btnExit.setText(_translate("resultWindow", "退出"))
        self.btnDel.setText(_translate("resultWindow", "删除"))
        self.btnAdd.setText(_translate("resultWindow", "添加"))
        self.btnEdit.setText(_translate("resultWindow", "修改"))
        self.btnQuery.setText(_translate("resultWindow", "刷新"))
        item = self.tbResult.horizontalHeaderItem(0)
        item.setText(_translate("resultWindow", "编号"))
        item = self.tbResult.horizontalHeaderItem(1)
        item.setText(_translate("resultWindow", "学生编号"))
        item = self.tbResult.horizontalHeaderItem(2)
        item.setText(_translate("resultWindow", "学生姓名"))
        item = self.tbResult.horizontalHeaderItem(3)
        item.setText(_translate("resultWindow", "班级"))
        item = self.tbResult.horizontalHeaderItem(4)
        item.setText(_translate("resultWindow", "种类"))
        item = self.tbResult.horizontalHeaderItem(5)
        item.setText(_translate("resultWindow", "科目"))
        item = self.tbResult.horizontalHeaderItem(6)
        item.setText(_translate("resultWindow", "成绩"))
        self.label_4.setText(_translate("resultWindow", "学生姓名："))
        self.label_5.setText(_translate("resultWindow", "考试科目："))
        self.label_6.setText(_translate("resultWindow", "成绩："))
        self.label_10.setText(_translate("resultWindow", "选择年级："))
import rc_rc
