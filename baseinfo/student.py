# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'student.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sql

class Ui_studentWindow(QtWidgets.QMainWindow):
    def setclassindex(self, index):
        self.classindex = index
        print(index)
    def reload(self, Isfirst):
        print(Isfirst, self.classindex)
        gradedict = sql.getgrade()
        self.gradedict = gradedict
        gradeID, self.gradeName = list(gradedict.keys()), list(gradedict.values())
        classtup = sql.getclass()
        self.classtup = classtup
        classID, gradeclassID, className = [], [], []
        for x, y, z in classtup:
            if self.cboxGrade.currentIndex() == len(self.gradeName) or Isfirst:
                # 如果选择全部，则全部加入
                classID.append(x)
                gradeclassID.append(y)
                className.append(z)
            elif gradeID[self.cboxGrade.currentIndex()] == y:
                classID.append(x)
                gradeclassID.append(y)
                className.append(z)
        self.className = className
        classdict = dict(zip(classID, className))
        gradeclassdict = dict(zip(classID, gradeclassID))
        if Isfirst:
            self.cboxGrade.clear()
            self.cboxGrade.addItems(self.gradeName+["所有"])
            self.cboxGrade.setCurrentIndex(len(gradeID))
        if self.classindex == -1:
            self.cboxClass.clear()
            self.cboxClass.addItems(className + ["所有"])
            self.cboxClass.setCurrentIndex(len(className))
        else:
            index = self.classindex
            self.cboxClass.clear()
            self.cboxClass.addItems(className + ["所有"])
            self.cboxClass.setCurrentIndex(index)
            self.classindex = -1
        studentdb = sql.getstudent()
        # studentdb = ((stuID, stuName, classID, gradeId, age, sex, phone, address), )
        self.tbStudent.setRowCount(len(studentdb))
        for x in range(len(studentdb)):
            # 默认让所有行都显示
            self.tbStudent.showRow(x)
        for i in range(len(studentdb)):
            # i为行数
            if self.cboxGrade.currentIndex() != len(gradeID): # 如果选择的是所有，则掉过过滤
                if studentdb[i][3] != gradeID[self.cboxGrade.currentIndex()]:
                    self.tbStudent.hideRow(i)
                    continue
            if self.cboxClass.currentIndex() != len(classID):
                if studentdb[i][2] != classID[self.cboxClass.currentIndex()]:
                    self.tbStudent.hideRow(i)
                    continue
            for j in range(len(studentdb[i])):
                if  j < 3:
                # j为列数
                    self.tbStudent.setItem(i, j, QtWidgets.QTableWidgetItem(str(studentdb[i][j])))
                    if j == 2:
                        self.tbStudent.setItem(i, j, QtWidgets.QTableWidgetItem(className[classID.index(studentdb[i][j])]))
                elif j > 3:
                    self.tbStudent.setItem(i, j-1, QtWidgets.QTableWidgetItem(str(studentdb[i][j])))
        self.tbStudent.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
    def DELETE(self):
        if self.tbStudent.currentRow() == -1:
            QtWidgets.QMessageBox.warning(self, "提示", "没有选择要删除的项目！")
            return None
        id = self.tbStudent.item(self.tbStudent.currentRow(), 0).text()
        print(id)
        choice = QtWidgets.QMessageBox.question(self, "提示", f"是否要删除学生ID {id} ？")
        if choice == QtWidgets.QMessageBox.Yes:
            flag = sql.deltestudent(id)
            if flag:
                QtWidgets.QMessageBox.information(self, "提示", "删除学生成功！")
            else:
                QtWidgets.QMessageBox.critical(self, "提示", "删除失败！")
        self.reload(False)
    def ADD(self):
        classID, className = [], []
        # 将字典键值对调
        for x, y, z in self.classtup:
            classID.append(x)
            className.append(z)
        classdict = dict(zip(className, classID))
        gradedict = dict(zip(list(self.gradedict.values()), list(self.gradedict.keys())))
        print(classdict, gradedict)
        choicegrade = self.cboxGrade.itemText(self.cboxGrade.currentIndex())
        choiceclass = self.cboxClass.itemText(self.cboxClass.currentIndex())
        print(choicegrade, choiceclass)
        if self.editID.text() == "" or self.editName.text() == "" or self.editAge.text() == "" or self.editAddress.text() == "" or self.editPhone.text() == "":
            QtWidgets.QMessageBox.warning(self, "提示", "请输入完整的学生信息！")
            return None
        if choicegrade == "所有" or choiceclass == "所有":
            QtWidgets.QMessageBox.warning(self, "提示", "请选择具体的年级或班级！")
            return None
        print(gradedict[choicegrade], classdict[choiceclass])
        flag = sql.addstudent((self.editID.text(), self.editName.text(), classdict[choiceclass],
                               gradedict[choicegrade], self.editAge.value(), self.cboxSex.itemText(self.cboxSex.currentIndex()),
                               self.editPhone.text(), self.editAddress.text()))
        if flag:
            QtWidgets.QMessageBox.information(self, "提示", "添加学生信息成功！")
            self.reload(False)
        else:
            QtWidgets.QMessageBox.critical(self, "提示", "非法输入！")
    def EDIT(self):
        print(self.tbStudent.currentColumn())
        if self.tbStudent.currentRow() == -1 or self.tbStudent.currentColumn() == -1:
            QtWidgets.QMessageBox.warning(self, "提示", "请先选择一个目标！")
            return None
        index = (self.tbStudent.currentRow(), self.tbStudent.currentColumn())
        stuID = self.tbStudent.item(self.tbStudent.currentRow(), 0).text()
        if index[1] == 0:
            text, falg = QtWidgets.QInputDialog.getText(self, "修改编号", "请输入修改之后的学生编号：", text=self.tbStudent.item(index[0], index[1]).text())
            if falg:
                result = sql.editstudent(0, stuID, text)
                if result:
                    QtWidgets.QMessageBox.information(self, "提示", "修改成功！")
                    self.reload(False)
                else:
                    QtWidgets.QMessageBox.critical(self, "提示", "修改失败，非法输入！")
        elif index[1] == 1:
            text, falg = QtWidgets.QInputDialog.getText(self, "修改姓名", "请输入修改之后的学生姓名：", text=self.tbStudent.item(index[0], index[1]).text())
            if falg:
                result = sql.editstudent(1, stuID, text)
                if result:
                    QtWidgets.QMessageBox.information(self, "提示", "修改成功！")
                    self.reload(False)
                else:
                    QtWidgets.QMessageBox.critical(self, "提示", "修改失败，非法输入！")
        elif index[1] == 2:
            print(self.classtup)
            className, classIDtup = [], []
            for x, y, z in self.classtup:
                classIDtup.append((x, y))
                className.append(z)
            classdict = dict(zip(className, classIDtup))
            print(classdict)
            text, flag = QtWidgets.QInputDialog.getItem(self, "修改班级", "请选择班级：", self.className, self.className.index(self.tbStudent.currentItem().text()), False)
            if flag:
                result = sql.editstudent(2, stuID, classdict[text])
                if result:
                    QtWidgets.QMessageBox.information(self, "提示", "修改成功！")
                    self.reload(False)
                else:
                    QtWidgets.QMessageBox.critical(self, "提示", "修改失败，非法输入！")
        elif index[1] == 3:
            age, falg = QtWidgets.QInputDialog.getInt(self, "修改年龄", "请输入修改之后的年龄",  int(self.tbStudent.item(index[0],index[1]).text()), 0, 500, 1)
            if falg:
                result = sql.editstudent(3, stuID, int(age))
                if result:
                    QtWidgets.QMessageBox.information(self, "提示", "修改成功！")
                    self.reload(False)
                else:
                    QtWidgets.QMessageBox.critical(self, "提示", "修改失败，非法输入！")
        elif index[1] == 4:
            text, flag = QtWidgets.QInputDialog.getItem(self, "修改性别", "请选择性别：", ["男", "女"], 0, False)
            if flag:
                result = sql.editstudent(4, stuID, text)
                if result:
                    QtWidgets.QMessageBox.information(self, "提示", "修改成功！")
                    self.reload(False)
                else:
                    QtWidgets.QMessageBox.critical(self, "提示", "修改失败，非法输入！")
        elif index[1] == 5:
            text, falg = QtWidgets.QInputDialog.getText(self, "修改电话", "请输入修改之后的联系电话：", text=self.tbStudent.item(index[0], index[1]).text())
            if falg:
                result = sql.editstudent(5, stuID, text)
                if result:
                    QtWidgets.QMessageBox.information(self, "提示", "修改成功！")
                    self.reload(False)
                else:
                    QtWidgets.QMessageBox.critical(self, "提示", "修改失败，非法输入！")
        elif index[1] == 6:
            text, falg = QtWidgets.QInputDialog.getText(self, "修改住址", "请输入修改之后的住址：", text=self.tbStudent.item(index[0], index[1]).text())
            if falg:
                result = sql.editstudent(6, stuID, text)
                if result:
                    QtWidgets.QMessageBox.information(self, "提示", "修改成功！")
                    self.reload(False)
                else:
                    QtWidgets.QMessageBox.critical(self, "提示", "修改失败，非法输入！")
    def setupUi(self, studentWindow):
        self.classindex = -1
        studentWindow.setObjectName("studentWindow")
        studentWindow.resize(705, 414)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/ico/images/appstu.ICO"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        studentWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(studentWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(96, 9, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.cboxGrade = QtWidgets.QComboBox(self.centralwidget)
        self.cboxGrade.setGeometry(QtCore.QRect(169, 9, 69, 22))
        self.cboxGrade.setObjectName("cboxGrade")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(256, 9, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.cboxClass = QtWidgets.QComboBox(self.centralwidget)
        self.cboxClass.setGeometry(QtCore.QRect(329, 9, 69, 22))
        self.cboxClass.setObjectName("cboxClass")
        self.btnExit = QtWidgets.QPushButton(self.centralwidget)
        self.btnExit.setGeometry(QtCore.QRect(649, 3, 51, 31))
        self.btnExit.setObjectName("btnExit")
        self.btnDel = QtWidgets.QPushButton(self.centralwidget)
        self.btnDel.setGeometry(QtCore.QRect(589, 3, 51, 31))
        self.btnDel.setObjectName("btnDel")
        self.btnAdd = QtWidgets.QPushButton(self.centralwidget)
        self.btnAdd.setGeometry(QtCore.QRect(469, 3, 51, 31))
        self.btnAdd.setObjectName("btnAdd")
        self.btnEdit = QtWidgets.QPushButton(self.centralwidget)
        self.btnEdit.setGeometry(QtCore.QRect(529, 3, 51, 31))
        self.btnEdit.setObjectName("btnEdit")
        self.btnQuery = QtWidgets.QPushButton(self.centralwidget)
        self.btnQuery.setGeometry(QtCore.QRect(409, 3, 51, 31))
        self.btnQuery.setObjectName("btnQuery")
        self.tbStudent = QtWidgets.QTableWidget(self.centralwidget)
        self.tbStudent.setGeometry(QtCore.QRect(0, 40, 701, 301))
        self.tbStudent.setObjectName("tbStudent")
        self.tbStudent.setColumnCount(7)
        self.tbStudent.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tbStudent.setHorizontalHeaderItem(6, item)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(123, 353, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.editID = QtWidgets.QLineEdit(self.centralwidget)
        self.editID.setGeometry(QtCore.QRect(197, 353, 71, 20))
        self.editID.setObjectName("editID")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(293, 353, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.editName = QtWidgets.QLineEdit(self.centralwidget)
        self.editName.setGeometry(QtCore.QRect(367, 353, 71, 20))
        self.editName.setObjectName("editName")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(463, 353, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.editAge = QtWidgets.QSpinBox(self.centralwidget)
        self.editAge.setGeometry(QtCore.QRect(507, 353, 71, 20))
        self.editAge.setRange(0, 100)
        self.editAge.setValue(18)
        self.editAge.setObjectName("editAge")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(597, 353, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.cboxSex = QtWidgets.QComboBox(self.centralwidget)
        self.cboxSex.setGeometry(QtCore.QRect(647, 353, 51, 22))
        self.cboxSex.setObjectName("cboxSex")
        self.cboxSex.addItem("")
        self.cboxSex.addItem("")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(123, 383, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_8.setFont(font)
        self.label_8.setObjectName("label_8")
        self.editPhone = QtWidgets.QLineEdit(self.centralwidget)
        self.editPhone.setGeometry(QtCore.QRect(197, 383, 121, 20))
        self.editPhone.setObjectName("editPhone")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(343, 383, 71, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.editAddress = QtWidgets.QLineEdit(self.centralwidget)
        self.editAddress.setGeometry(QtCore.QRect(417, 383, 281, 20))
        self.editAddress.setObjectName("editAddress")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(29, 346, 71, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("color: rgb(255, 0, 0);")
        self.label.setWordWrap(True)
        self.label.setObjectName("label")
        studentWindow.setCentralWidget(self.centralwidget)
        self.reload(True)

        self.retranslateUi(studentWindow)
        self.btnExit.clicked.connect(studentWindow.close)
        self.btnQuery.clicked.connect(self.reload)
        self.cboxGrade.currentIndexChanged.connect(self.btnQuery.click)
        self.cboxClass.currentIndexChanged.connect(self.setclassindex)
        self.btnDel.clicked.connect(self.DELETE)
        self.btnAdd.clicked.connect(self.ADD)
        self.btnEdit.clicked.connect(self.EDIT)
        QtCore.QMetaObject.connectSlotsByName(studentWindow)

    def retranslateUi(self, studentWindow):
        _translate = QtCore.QCoreApplication.translate
        studentWindow.setWindowTitle(_translate("studentWindow", "学生信息管理"))
        self.label_2.setText(_translate("studentWindow", "所属年级："))
        self.label_3.setText(_translate("studentWindow", "所属班级："))
        self.btnExit.setText(_translate("studentWindow", "退出"))
        self.btnDel.setText(_translate("studentWindow", "删除"))
        self.btnAdd.setText(_translate("studentWindow", "添加"))
        self.btnEdit.setText(_translate("studentWindow", "修改"))
        self.btnQuery.setText(_translate("studentWindow", "刷新"))
        item = self.tbStudent.horizontalHeaderItem(0)
        item.setText(_translate("studentWindow", "学生编号"))
        item = self.tbStudent.horizontalHeaderItem(1)
        item.setText(_translate("studentWindow", "学生姓名"))
        item = self.tbStudent.horizontalHeaderItem(2)
        item.setText(_translate("studentWindow", "班级"))
        item = self.tbStudent.horizontalHeaderItem(3)
        item.setText(_translate("studentWindow", "年龄"))
        item = self.tbStudent.horizontalHeaderItem(4)
        item.setText(_translate("studentWindow", "性别"))
        item = self.tbStudent.horizontalHeaderItem(5)
        item.setText(_translate("studentWindow", "联系电话"))
        item = self.tbStudent.horizontalHeaderItem(6)
        item.setText(_translate("studentWindow", "家庭住址"))
        self.label_4.setText(_translate("studentWindow", "学生编号："))
        self.label_5.setText(_translate("studentWindow", "学生姓名："))
        self.label_6.setText(_translate("studentWindow", "年龄："))
        self.label_7.setText(_translate("studentWindow", "性别："))
        self.cboxSex.setItemText(0, _translate("studentWindow", "男"))
        self.cboxSex.setItemText(1, _translate("studentWindow", "女"))
        self.label_8.setText(_translate("studentWindow", "联系电话："))
        self.label_9.setText(_translate("studentWindow", "家庭住址："))
        self.label.setText(_translate("studentWindow", "信息设置"))
import rc_rc
